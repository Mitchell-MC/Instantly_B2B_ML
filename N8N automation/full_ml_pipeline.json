{
    "name": "EC2 ML Pipeline Manager with SHAP",
    "nodes": [
      {
        "parameters": {
          "jsCode": "// Pipeline component selector with SHAP integration\nconst pipelineComponents = {\n  'train': {\n    name: 'Model Training with SHAP',\n    description: 'Train ML models and generate SHAP analysis',\n    estimated_duration: '15-20 minutes',\n    instance_type: 't3.large',\n    command: '--train --force --shap',\n    output_files: ['trained_model.joblib', 'shap_analysis.png', 'feature_importance.json'],\n    cost_per_hour: 0.0832\n  },\n  'test': {\n    name: 'Model Testing & Validation',\n    description: 'Run comprehensive model tests and validation',\n    estimated_duration: '10-15 minutes',\n    instance_type: 't3.medium',\n    command: '--test --shap',\n    output_files: ['test_results.json', 'validation_metrics.json'],\n    cost_per_hour: 0.0416\n  },\n  'monitor': {\n    name: 'Monitoring & Drift Detection',\n    description: 'Run drift detection and quality monitoring',\n    estimated_duration: '8-12 minutes',\n    instance_type: 't3.small',\n    command: '--monitor --drift',\n    output_files: ['drift_report.json', 'quality_metrics.json'],\n    cost_per_hour: 0.0208\n  },\n  'predict': {\n    name: 'Lead Scoring with SHAP',\n    description: 'Generate predictions with SHAP explanations',\n    estimated_duration: '5-10 minutes',\n    instance_type: 't3.medium',\n    command: '--predict --shap --top5',\n    output_files: ['predictions.csv', 'shap_explanations.json', 'top5_features.csv'],\n    cost_per_hour: 0.0416\n  },\n  'all': {\n    name: 'Complete Pipeline with SHAP',\n    description: 'Run entire ML pipeline with SHAP analysis',\n    estimated_duration: '30-45 minutes',\n    instance_type: 't3.xlarge',\n    command: '--all --shap',\n    output_files: ['complete_pipeline_results.json', 'shap_analysis_complete.zip'],\n    cost_per_hour: 0.1664\n  }\n};\n\n// Get the requested component\nconst requestedComponent = $input.first().json.component || 'train';\nconst component = pipelineComponents[requestedComponent];\n\nif (!component) {\n  throw new Error(`Unknown pipeline component: ${requestedComponent}`);\n}\n\n// Create execution plan with cost estimation\nconst executionPlan = {\n  component: requestedComponent,\n  component_config: component,\n  instance_type: component.instance_type,\n  command: component.command,\n  estimated_duration: component.estimated_duration,\n  output_files: component.output_files,\n  cost_per_hour: component.cost_per_hour,\n  estimated_cost: (component.cost_per_hour * component.estimated_duration / 60).toFixed(4),\n  shap_enabled: component.command.includes('--shap'),\n  timestamp: new Date().toISOString(),\n  status: 'planned'\n};\n\nconsole.log(`ÔøΩÔøΩ Pipeline Component: ${component.name}`);\nconsole.log(`üí∞ Estimated Cost: $${executionPlan.estimated_cost}`);\nconsole.log(`üîç SHAP Analysis: ${executionPlan.shap_enabled ? 'Enabled' : 'Disabled'}`);\n\nreturn {\n  json: executionPlan\n};"
        },
        "id": "define-pipeline-components",
        "name": "Define Pipeline Components",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [240, 300]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "url": "https://ec2.amazonaws.com",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "nodeCredentialType": "awsCredentials",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "Action",
                "value": "RunInstances"
              },
              {
                "name": "ImageId",
                "value": "ami-0c02fb55956c7d316"
              },
              {
                "name": "InstanceType",
                "value": "={{ $json.instance_type }}"
              },
              {
                "name": "MinCount",
                "value": "1"
              },
              {
                "name": "MaxCount",
                "value": "1"
              },
              {
                "name": "SecurityGroupIds.1",
                "value": "sg-0123456789abcdef0"
              },
              {
                "name": "SubnetId",
                "value": "subnet-0123456789abcdef0"
              },
              {
                "name": "IamInstanceProfile.Name",
                "value": "EC2SSMRole"
              },
              {
                "name": "UserData",
                "value": "IyEvYmluL2Jhc2gKeXVtIHVwZGF0ZSAteQp5dW0gaW5zdGFsbCAteSBnaXQgcHl0aG9uMy1waXAKe2NkIC9ob21lL3VidW50dQpnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3lvdXItdXNlcm5hbWUvSW5zdGFudGx5LUJCLU1MLmdpdApjZCBJbnN0YW50bHktQkItTUwKcGlwMyBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQKcGlwMyBpbnN0YWxsIGJvdG8zIGF3c2NsaQ=="
              },
              {
                "name": "Version",
                "value": "2016-11-15"
              }
            ]
          },
          "options": {}
        },
        "id": "launch-ec2-instance",
        "name": "Launch EC2 Instance",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [460, 300]
      },
      {
        "parameters": {
          "jsCode": "// Extract instance details and prepare for execution\nconst response = $input.first().json;\nconst instanceId = response.reservations[0].instances[0].instanceId;\nconst instanceType = response.reservations[0].instances[0].instanceType;\nconst launchTime = response.reservations[0].instances[0].launchTime;\nconst privateIp = response.reservations[0].instances[0].privateIpAddress;\n\nconsole.log(`üöÄ Launched EC2 Instance for ${$input.first().json.component_config.name}:`);\nconsole.log(`  Instance ID: ${instanceId}`);\nconsole.log(`  Instance Type: ${instanceType}`);\nconsole.log(`  Private IP: ${privateIp}`);\nconsole.log(`  Launch Time: ${launchTime}`);\nconsole.log(`  SHAP Analysis: ${$input.first().json.shap_enabled ? 'Enabled' : 'Disabled'}`);\nconsole.log(`  Estimated Cost: $${$input.first().json.estimated_cost}`);\n\nreturn {\n  json: {\n    instance_id: instanceId,\n    instance_type: instanceType,\n    private_ip: privateIp,\n    launch_time: launchTime,\n    status: 'launching',\n    pipeline_component: $input.first().json.component,\n    command: $input.first().json.command,\n    shap_enabled: $input.first().json.shap_enabled,\n    output_files: $input.first().json.output_files,\n    estimated_cost: $input.first().json.estimated_cost,\n    start_time: new Date().toISOString()\n  }\n};"
        },
        "id": "extract-instance-details",
        "name": "Extract Instance Details",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [680, 300]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "url": "https://ssm.amazonaws.com",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "nodeCredentialType": "awsCredentials",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "Action",
                "value": "SendCommand"
              },
              {
                "name": "InstanceIds.1",
                "value": "={{ $json.instance_id }}"
              },
              {
                "name": "DocumentName",
                "value": "AWS-RunShellScript"
              },
              {
                "name": "Parameters.commands",
                "value": "cd /home/ubuntu/Instantly-B2B-ML && python run_ml_pipeline.py {{ $json.command }}"
              },
              {
                "name": "Version",
                "value": "2014-11-06"
              }
            ]
          },
          "options": {}
        },
        "id": "execute-pipeline-command",
        "name": "Execute Pipeline Command",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [900, 300]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "url": "https://ssm.amazonaws.com",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "nodeCredentialType": "awsCredentials",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "Action",
                "value": "GetCommandInvocation"
              },
              {
                "name": "CommandId",
                "value": "={{ $json.command.commandId }}"
              },
              {
                "name": "InstanceId",
                "value": "={{ $json.instance_id }}"
              },
              {
                "name": "Version",
                "value": "2014-11-06"
              }
            ]
          },
          "options": {}
        },
        "id": "monitor-command-execution",
        "name": "Monitor Command Execution",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1120, 300]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "command-status-check",
                "leftValue": "={{ $json.status }}",
                "rightValue": "Success",
                "operator": {
                  "type": "string",
                  "operation": "equals"
                }
              }
            ],
            "combinator": "and"
          }
        },
        "id": "check-command-completion",
        "name": "Check Command Completion",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [1340, 300]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "url": "https://s3.amazonaws.com",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "nodeCredentialType": "awsCredentials",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "Action",
                "value": "GetObject"
              },
              {
                "name": "Bucket",
                "value": "ml-pipeline-outputs"
              },
              {
                "name": "Key",
                "value": "={{ $json.instance_id }}/pipeline_results.json"
              }
            ]
          },
          "options": {}
        },
        "id": "retrieve-pipeline-results",
        "name": "Retrieve Pipeline Results",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [1560, 200]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "url": "https://ec2.amazonaws.com",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "nodeCredentialType": "awsCredentials",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "Action",
                "value": "TerminateInstances"
              },
              {
                "name": "InstanceId.1",
                "value": "={{ $json.instance_id }}"
              },
              {
                "name": "Version",
                "value": "2016-11-15"
              }
            ]
          },
          "options": {}
        },
        "id": "terminate-ec2-instance",
        "name": "Terminate EC2 Instance",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [1560, 400]
      },
      {
        "parameters": {
          "jsCode": "// Process pipeline results and create comprehensive report\nconst results = $input.first().json;\nconst pipelineComponent = $input.first().json.pipeline_component;\nconst shapEnabled = $input.first().json.shap_enabled;\nconst startTime = new Date($input.first().json.start_time);\nconst endTime = new Date();\nconst executionTimeMinutes = (endTime - startTime) / (1000 * 60);\n\n// Calculate actual cost\nconst actualCost = ($input.first().json.estimated_cost * executionTimeMinutes / 60).toFixed(4);\n\nlet processedResults = {\n  execution_id: `exec_${Date.now()}`,\n  pipeline_component: pipelineComponent,\n  instance_id: $input.first().json.instance_id,\n  instance_type: $input.first().json.instance_type,\n  status: 'completed',\n  start_time: startTime.toISOString(),\n  end_time: endTime.toISOString(),\n  execution_time_minutes: executionTimeMinutes,\n  estimated_cost: $input.first().json.estimated_cost,\n  actual_cost: actualCost,\n  cost_savings: ($input.first().json.estimated_cost - actualCost).toFixed(4),\n  timestamp: new Date().toISOString()\n};\n\n// Add SHAP-specific processing if enabled\nif (shapEnabled && results) {\n  processedResults.shap_analysis = {\n    enabled: true,\n    top5_features: results.top5_features || [],\n    shap_values_generated: results.shap_values_generated || false,\n    feature_importance_plot: results.feature_importance_plot || null,\n    individual_explanations: results.individual_explanations || [],\n    global_feature_importance: results.global_feature_importance || []\n  };\n  \n  console.log('üîç SHAP Analysis Results:');\n  if (results.top5_features) {\n    console.log('  Top 5 Influencing Features:');\n    results.top5_features.forEach((feature, idx) => {\n      console.log(`    ${idx + 1}. ${feature.name}: ${feature.importance.toFixed(4)}`);\n    });\n  }\n} else {\n  processedResults.shap_analysis = {\n    enabled: false,\n    message: 'SHAP analysis not requested for this component'\n  };\n}\n\n// Add pipeline results\nif (results) {\n  processedResults.pipeline_results = {\n    status: results.status || 'unknown',\n    phases_completed: results.phases_completed || 0,\n    output_files: results.output_files || [],\n    error: results.error || null\n  };\n}\n\nconsole.log(`ÔøΩÔøΩ Pipeline Component '${pipelineComponent}' Completed Successfully!`);\nconsole.log(`‚è±Ô∏è Execution Time: ${executionTimeMinutes.toFixed(2)} minutes`);\nconsole.log(`üí∞ Estimated Cost: $${$input.first().json.estimated_cost}`);\nconsole.log(`üí∞ Actual Cost: $${actualCost}`);\nconsole.log(`üíµ Cost Savings: $${processedResults.cost_savings}`);\n\nreturn {\n  json: processedResults\n};"
        },
        "id": "process-pipeline-results",
        "name": "Process Pipeline Results",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1780, 300]
      },
      {
        "parameters": {
          "operation": "write",
          "fileName": "pipeline_execution_report.json",
          "options": {}
        },
        "id": "save-execution-report",
        "name": "Save Execution Report",
        "type": "n8n-nodes-base.fileOperations",
        "typeVersion": 1.1,
        "position": [2000, 300]
      }
    ],
    "connections": {
      "Define Pipeline Components": {
        "main": [
          [
            {
              "node": "Launch EC2 Instance",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Launch EC2 Instance": {
        "main": [
          [
            {
              "node": "Extract Instance Details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Instance Details": {
        "main": [
          [
            {
              "node": "Execute Pipeline Command",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Pipeline Command": {
        "main": [
          [
            {
              "node": "Monitor Command Execution",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Monitor Command Execution": {
        "main": [
          [
            {
              "node": "Check Command Completion",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Command Completion": {
        "main": [
          [
            {
              "node": "Retrieve Pipeline Results",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Terminate EC2 Instance",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve Pipeline Results": {
        "main": [
          [
            {
              "node": "Process Pipeline Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Terminate EC2 Instance": {
        "main": [
          [
            {
              "node": "Process Pipeline Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Pipeline Results": {
        "main": [
          [
            {
              "node": "Save Execution Report",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "tags": [],
    "triggerCount": 0,
    "updatedAt": "2025-01-15T10:00:00.000Z",
    "versionId": "1"
  }