version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: ml_postgres
    environment:
      POSTGRES_DB: ml_lead_scoring
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ml_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ml_lead_scoring_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N8N Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: ml_n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-n8n_admin_123}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/New_York
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=ml_lead_scoring
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD:-ml_password_123}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n_workflows:/home/node/.n8n/workflows
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Processing Service
  data_processor:
    build:
      context: .
      dockerfile: Dockerfile.data_processor
    container_name: ml_data_processor
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ml_lead_scoring
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-ml_password_123}
      - FLASK_ENV=production
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Model Service
  ml_service:
    build:
      context: .
      dockerfile: Dockerfile.ml_service
    container_name: ml_model_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ml_lead_scoring
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-ml_password_123}
      - FLASK_ENV=production
    ports:
      - "5001:5001"
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Dashboard
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: ml_monitoring
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ml_lead_scoring
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-ml_password_123}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SENDER_EMAIL=${SENDER_EMAIL:-}
      - SENDER_PASSWORD=${SENDER_PASSWORD:-}
      - ALERT_RECIPIENTS=${ALERT_RECIPIENTS:-}
    ports:
      - "5002:5002"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: ml_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ml_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana_admin_123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-postgresql-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - postgres
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ml_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # API Gateway (Nginx)
  nginx:
    image: nginx:alpine
    container_name: ml_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - n8n
      - data_processor
      - ml_service
      - grafana
    restart: unless-stopped

volumes:
  postgres_data:
  n8n_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: ml_lead_scoring_network
